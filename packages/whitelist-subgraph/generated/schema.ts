// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DataProvider extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DataProvider entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DataProvider entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DataProvider", id.toString(), this);
    }
  }

  static load(id: string): DataProvider | null {
    return changetype<DataProvider | null>(store.get("DataProvider", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get dataFeeds(): Array<string> | null {
    let value = this.get("dataFeeds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set dataFeeds(value: Array<string> | null) {
    if (!value) {
      this.unset("dataFeeds");
    } else {
      this.set("dataFeeds", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class DataFeed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("referenceAsset", Value.fromString(""));
    this.set("referenceAssetUnified", Value.fromString(""));
    this.set("dataProvider", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DataFeed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DataFeed entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DataFeed", id.toString(), this);
    }
  }

  static load(id: string): DataFeed | null {
    return changetype<DataFeed | null>(store.get("DataFeed", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get referenceAsset(): string {
    let value = this.get("referenceAsset");
    return value!.toString();
  }

  set referenceAsset(value: string) {
    this.set("referenceAsset", Value.fromString(value));
  }

  get referenceAssetUnified(): string {
    let value = this.get("referenceAssetUnified");
    return value!.toString();
  }

  set referenceAssetUnified(value: string) {
    this.set("referenceAssetUnified", Value.fromString(value));
  }

  get dataProvider(): string {
    let value = this.get("dataProvider");
    return value!.toString();
  }

  set dataProvider(value: string) {
    this.set("dataProvider", Value.fromString(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }
}
