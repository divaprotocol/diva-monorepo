# Challenge entity captures all the challenges
# submitted by position token holders for a given
# contingent pool
type Challenge @entity {
  id: ID!
  challengedBy: Bytes!
  proposedFinalReferenceValue: BigInt!
  pool: Pool!
}

# Pool entity captures the latest state of a
# contingent pool. Parameters are set/updated when
# a contingent pool is created, liquidity is added/removed
# and during the settlement process (e.g., when final
# reference value is set)
type Pool @entity {
  id: ID! # original -> poolId
  floor: BigInt!
  inflection: BigInt!
  cap: BigInt!
  gradient: BigInt!
  collateralBalance: BigInt!
  collateralBalanceGross: BigInt!
  finalReferenceValue: BigInt!
  capacity: BigInt!
  statusTimestamp: BigInt!
  shortToken: PositionToken!
  payoutShort: BigInt!
  longToken: PositionToken!
  payoutLong: BigInt!
  collateralToken: CollateralToken!
  expiryTime: BigInt!
  dataProvider: Bytes!
  protocolFee: BigInt!
  settlementFee: BigInt!
  submissionPeriod: BigInt!
  challengePeriod: BigInt!
  reviewPeriod: BigInt!
  fallbackSubmissionPeriod: BigInt!
  statusFinalReferenceValue: String!
  referenceAsset: String!
  supplyShort: BigInt!
  supplyLong: BigInt!
  permissionedERC721Token: String!
  createdBy: Bytes!
  createdAt: BigInt!
  challenges: [Challenge!] @derivedFrom(field: "pool")
}

# CollateralToken entity captures the collateral tokens
# that are being used as collateral assets when creating
# contingent pools. The collateral token is also the asset
# in which fees are denominated.
type CollateralToken @entity {
  id: ID! # original -> collateral token address
  name: String!
  decimals: Int!
  symbol: String!
  feeRecipients: [FeeRecipientCollateralToken!] @derivedFrom(field: "collateralToken")
}

type FeeRecipient @entity {
  id: ID! # feeRecipient address
  collateralTokens: [FeeRecipientCollateralToken!] @derivedFrom(field: "feeRecipient")
}

type FeeRecipientCollateralToken @entity {
  id: ID! # Set to `${feeRecipient.id}-${collateralToken.id}`
  feeRecipient: FeeRecipient!
  collateralToken: CollateralToken!
  amount: BigInt!
}

type PositionToken @entity {
  id: ID! # Address
  name: String!
  symbol: String!
  decimals: Int!
  pool: Pool!
  owner: Bytes!
  users: [UserPositionToken!] @derivedFrom(field: "positionToken")
}

type User @entity {
  id: ID! # UserAddress
  positionTokens: [UserPositionToken!] @derivedFrom(field: "user")
}

type UserPositionToken @entity {
  id: ID! # Set to `${user.id}-${positionToken.id}`
  user: User!
  positionToken: PositionToken!
  receivedAt: BigInt! # timestamp when user received position token via create pool, add liquidity or trading
}

# 0x offer fills. Used to update UserPositionToken entity. 
type NativeOrderFill @entity {
  # tx hash - order hash - log index
  id: ID!
  orderHash: Bytes!
  maker: Bytes!
  taker: Bytes!
  makerToken: Bytes!
  takerToken: Bytes!
  makerTokenFilledAmount: BigInt!
  takerTokenFilledAmount: BigInt!
  takerTokenFeeFilledAmount: BigInt!
  timestamp: BigInt!
}

# DIVA offer fills
type DIVAOfferFill @entity {
  # tx hash - offer hash - log index
  id: ID!
  offerHash: Bytes!
  maker: Bytes!
  taker: Bytes!
  makerToken: Bytes!
  takerToken: Bytes!
  makerIsLong: Boolean!
  makerFilledAmount: BigInt!
  takerFilledAmount: BigInt!
  pool: Pool!
  timestamp: BigInt!
}

# Entity tracking the changes in liquidity
# Note that offers are not yet covered here; only `addLiquidity` and `removeLiquidity`
type Liquidity @entity {
  id: ID! # poolId - tx hash - log index
  pool: Pool!
  msgSender: Bytes!
  longTokenHolder: Bytes!
  shortTokenHolder: Bytes!
  collateralAmount: BigInt!
  eventType: String! # Could be "Issued", "Added", or "Removed"
  timestamp: BigInt! # Block timestamp
}

