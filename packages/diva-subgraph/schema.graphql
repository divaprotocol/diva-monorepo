type Challenge @entity {
  id: ID!
  challengedBy: Bytes!
  proposedFinalReferenceValue: BigInt!
  pool: Pool!
}

type Pool @entity {
  id: ID! # original -> poolId
  referenceAsset: String!
  floor: BigInt!
  inflection: BigInt!
  cap: BigInt!
  supplyInitial: BigInt!
  supplyShort: BigInt!
  supplyLong: BigInt!
  expiryTime: BigInt!
  collateralToken: CollateralToken!
  collateralBalanceShortInitial: BigInt!
  collateralBalanceLongInitial: BigInt!
  collateralBalance: BigInt!

  shortToken: PositionToken!
  longToken: PositionToken!
  finalReferenceValue: BigInt!
  statusFinalReferenceValue: String!
  redemptionAmountLongToken: BigInt!
  redemptionAmountShortToken: BigInt!
  statusTimestamp: BigInt!
  dataProvider: Bytes!
  redemptionFee: BigInt!
  settlementFee: BigInt!

  createdBy: Bytes!
  createdAt: BigInt!
  capacity: BigInt!
  challenges: [Challenge!] @derivedFrom(field: "pool")
}

type CollateralToken @entity {
  id: ID! # original -> collateral token address
  name: String!
  decimals: Int!
  symbol: String!
  feeRecipients: [FeeRecipientCollateralToken!]
    @derivedFrom(field: "collateralToken")
}

type FeeRecipient @entity {
  id: ID! # feeRecipient address
  collateralTokens: [FeeRecipientCollateralToken!]
    @derivedFrom(field: "feeRecipient")
}

type FeeRecipientCollateralToken @entity {
  id: ID! # Set to `${feeRecipient.id}-${collateralToken.id}`
  feeRecipient: FeeRecipient!
  collateralToken: CollateralToken!
  amount: BigInt!
}

type PositionToken @entity {
  id: ID! # Address
  name: String!
  symbol: String!
  decimals: Int!
  pool: Pool!
  owner: Bytes!
}

type TestnetUser @entity {
  id: ID! # Address
  binaryPoolCreated: Boolean!
  linearPoolCreated: Boolean!
  convexPoolCreated: Boolean!
  concavePoolCreated: Boolean!
  liquidityAdded: Boolean!
  liquidityRemoved: Boolean!
  finalValueReported: Boolean!
  reportedValueChallanged: Boolean!
  positionTokenRedeemed: Boolean!
  feesClaimed: Boolean!
  feeClaimsTransfered: Boolean!
}
