// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Challenge extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("challengedBy", Value.fromBytes(Bytes.empty()));
    this.set("proposedFinalReferenceValue", Value.fromBigInt(BigInt.zero()));
    this.set("pool", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Challenge entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Challenge entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Challenge", id.toString(), this);
    }
  }

  static load(id: string): Challenge | null {
    return changetype<Challenge | null>(store.get("Challenge", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get challengedBy(): Bytes {
    let value = this.get("challengedBy");
    return value!.toBytes();
  }

  set challengedBy(value: Bytes) {
    this.set("challengedBy", Value.fromBytes(value));
  }

  get proposedFinalReferenceValue(): BigInt {
    let value = this.get("proposedFinalReferenceValue");
    return value!.toBigInt();
  }

  set proposedFinalReferenceValue(value: BigInt) {
    this.set("proposedFinalReferenceValue", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("referenceAsset", Value.fromString(""));
    this.set("inflection", Value.fromBigInt(BigInt.zero()));
    this.set("cap", Value.fromBigInt(BigInt.zero()));
    this.set("floor", Value.fromBigInt(BigInt.zero()));
    this.set("supplyShortInitial", Value.fromBigInt(BigInt.zero()));
    this.set("supplyLongInitial", Value.fromBigInt(BigInt.zero()));
    this.set("supplyShort", Value.fromBigInt(BigInt.zero()));
    this.set("supplyLong", Value.fromBigInt(BigInt.zero()));
    this.set("expiryDate", Value.fromBigInt(BigInt.zero()));
    this.set("collateralToken", Value.fromBytes(Bytes.empty()));
    this.set("collateralTokenName", Value.fromString(""));
    this.set("collateralDecimals", Value.fromI32(0));
    this.set("collateralSymbol", Value.fromString(""));
    this.set("collateralBalanceShortInitial", Value.fromBigInt(BigInt.zero()));
    this.set("collateralBalanceLongInitial", Value.fromBigInt(BigInt.zero()));
    this.set("collateralBalanceShort", Value.fromBigInt(BigInt.zero()));
    this.set("collateralBalanceLong", Value.fromBigInt(BigInt.zero()));
    this.set("shortToken", Value.fromBytes(Bytes.empty()));
    this.set("longToken", Value.fromBytes(Bytes.empty()));
    this.set("finalReferenceValue", Value.fromBigInt(BigInt.zero()));
    this.set("statusFinalReferenceValue", Value.fromString(""));
    this.set("redemptionAmountLongToken", Value.fromBigInt(BigInt.zero()));
    this.set("redemptionAmountShortToken", Value.fromBigInt(BigInt.zero()));
    this.set("statusTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("dataFeedProvider", Value.fromBytes(Bytes.empty()));
    this.set("redemptionFee", Value.fromBigInt(BigInt.zero()));
    this.set("settlementFee", Value.fromBigInt(BigInt.zero()));
    this.set("createdBy", Value.fromBytes(Bytes.empty()));
    this.set("capacity", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Pool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Pool", id.toString(), this);
    }
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get referenceAsset(): string {
    let value = this.get("referenceAsset");
    return value!.toString();
  }

  set referenceAsset(value: string) {
    this.set("referenceAsset", Value.fromString(value));
  }

  get inflection(): BigInt {
    let value = this.get("inflection");
    return value!.toBigInt();
  }

  set inflection(value: BigInt) {
    this.set("inflection", Value.fromBigInt(value));
  }

  get cap(): BigInt {
    let value = this.get("cap");
    return value!.toBigInt();
  }

  set cap(value: BigInt) {
    this.set("cap", Value.fromBigInt(value));
  }

  get floor(): BigInt {
    let value = this.get("floor");
    return value!.toBigInt();
  }

  set floor(value: BigInt) {
    this.set("floor", Value.fromBigInt(value));
  }

  get supplyShortInitial(): BigInt {
    let value = this.get("supplyShortInitial");
    return value!.toBigInt();
  }

  set supplyShortInitial(value: BigInt) {
    this.set("supplyShortInitial", Value.fromBigInt(value));
  }

  get supplyLongInitial(): BigInt {
    let value = this.get("supplyLongInitial");
    return value!.toBigInt();
  }

  set supplyLongInitial(value: BigInt) {
    this.set("supplyLongInitial", Value.fromBigInt(value));
  }

  get supplyShort(): BigInt {
    let value = this.get("supplyShort");
    return value!.toBigInt();
  }

  set supplyShort(value: BigInt) {
    this.set("supplyShort", Value.fromBigInt(value));
  }

  get supplyLong(): BigInt {
    let value = this.get("supplyLong");
    return value!.toBigInt();
  }

  set supplyLong(value: BigInt) {
    this.set("supplyLong", Value.fromBigInt(value));
  }

  get expiryDate(): BigInt {
    let value = this.get("expiryDate");
    return value!.toBigInt();
  }

  set expiryDate(value: BigInt) {
    this.set("expiryDate", Value.fromBigInt(value));
  }

  get collateralToken(): Bytes {
    let value = this.get("collateralToken");
    return value!.toBytes();
  }

  set collateralToken(value: Bytes) {
    this.set("collateralToken", Value.fromBytes(value));
  }

  get collateralTokenName(): string {
    let value = this.get("collateralTokenName");
    return value!.toString();
  }

  set collateralTokenName(value: string) {
    this.set("collateralTokenName", Value.fromString(value));
  }

  get collateralDecimals(): i32 {
    let value = this.get("collateralDecimals");
    return value!.toI32();
  }

  set collateralDecimals(value: i32) {
    this.set("collateralDecimals", Value.fromI32(value));
  }

  get collateralSymbol(): string {
    let value = this.get("collateralSymbol");
    return value!.toString();
  }

  set collateralSymbol(value: string) {
    this.set("collateralSymbol", Value.fromString(value));
  }

  get collateralBalanceShortInitial(): BigInt {
    let value = this.get("collateralBalanceShortInitial");
    return value!.toBigInt();
  }

  set collateralBalanceShortInitial(value: BigInt) {
    this.set("collateralBalanceShortInitial", Value.fromBigInt(value));
  }

  get collateralBalanceLongInitial(): BigInt {
    let value = this.get("collateralBalanceLongInitial");
    return value!.toBigInt();
  }

  set collateralBalanceLongInitial(value: BigInt) {
    this.set("collateralBalanceLongInitial", Value.fromBigInt(value));
  }

  get collateralBalanceShort(): BigInt {
    let value = this.get("collateralBalanceShort");
    return value!.toBigInt();
  }

  set collateralBalanceShort(value: BigInt) {
    this.set("collateralBalanceShort", Value.fromBigInt(value));
  }

  get collateralBalanceLong(): BigInt {
    let value = this.get("collateralBalanceLong");
    return value!.toBigInt();
  }

  set collateralBalanceLong(value: BigInt) {
    this.set("collateralBalanceLong", Value.fromBigInt(value));
  }

  get shortToken(): Bytes {
    let value = this.get("shortToken");
    return value!.toBytes();
  }

  set shortToken(value: Bytes) {
    this.set("shortToken", Value.fromBytes(value));
  }

  get longToken(): Bytes {
    let value = this.get("longToken");
    return value!.toBytes();
  }

  set longToken(value: Bytes) {
    this.set("longToken", Value.fromBytes(value));
  }

  get finalReferenceValue(): BigInt {
    let value = this.get("finalReferenceValue");
    return value!.toBigInt();
  }

  set finalReferenceValue(value: BigInt) {
    this.set("finalReferenceValue", Value.fromBigInt(value));
  }

  get statusFinalReferenceValue(): string {
    let value = this.get("statusFinalReferenceValue");
    return value!.toString();
  }

  set statusFinalReferenceValue(value: string) {
    this.set("statusFinalReferenceValue", Value.fromString(value));
  }

  get redemptionAmountLongToken(): BigInt {
    let value = this.get("redemptionAmountLongToken");
    return value!.toBigInt();
  }

  set redemptionAmountLongToken(value: BigInt) {
    this.set("redemptionAmountLongToken", Value.fromBigInt(value));
  }

  get redemptionAmountShortToken(): BigInt {
    let value = this.get("redemptionAmountShortToken");
    return value!.toBigInt();
  }

  set redemptionAmountShortToken(value: BigInt) {
    this.set("redemptionAmountShortToken", Value.fromBigInt(value));
  }

  get statusTimestamp(): BigInt {
    let value = this.get("statusTimestamp");
    return value!.toBigInt();
  }

  set statusTimestamp(value: BigInt) {
    this.set("statusTimestamp", Value.fromBigInt(value));
  }

  get dataFeedProvider(): Bytes {
    let value = this.get("dataFeedProvider");
    return value!.toBytes();
  }

  set dataFeedProvider(value: Bytes) {
    this.set("dataFeedProvider", Value.fromBytes(value));
  }

  get redemptionFee(): BigInt {
    let value = this.get("redemptionFee");
    return value!.toBigInt();
  }

  set redemptionFee(value: BigInt) {
    this.set("redemptionFee", Value.fromBigInt(value));
  }

  get settlementFee(): BigInt {
    let value = this.get("settlementFee");
    return value!.toBigInt();
  }

  set settlementFee(value: BigInt) {
    this.set("settlementFee", Value.fromBigInt(value));
  }

  get createdBy(): Bytes {
    let value = this.get("createdBy");
    return value!.toBytes();
  }

  set createdBy(value: Bytes) {
    this.set("createdBy", Value.fromBytes(value));
  }

  get capacity(): BigInt {
    let value = this.get("capacity");
    return value!.toBigInt();
  }

  set capacity(value: BigInt) {
    this.set("capacity", Value.fromBigInt(value));
  }

  get challenges(): Array<string> | null {
    let value = this.get("challenges");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set challenges(value: Array<string> | null) {
    if (!value) {
      this.unset("challenges");
    } else {
      this.set("challenges", Value.fromStringArray(<Array<string>>value));
    }
  }
}
